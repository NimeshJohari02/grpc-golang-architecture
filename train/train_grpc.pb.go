// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: train.proto

package train

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrainTicketService_PurchaseTicket_FullMethodName      = "/TrainTicketService/purchaseTicket"
	TrainTicketService_ViewReceipt_FullMethodName         = "/TrainTicketService/ViewReceipt"
	TrainTicketService_ViewUsersBySection_FullMethodName  = "/TrainTicketService/ViewUsersBySection"
	TrainTicketService_RemoveUserFromTrain_FullMethodName = "/TrainTicketService/RemoveUserFromTrain"
	TrainTicketService_ModifySeat_FullMethodName          = "/TrainTicketService/ModifySeat"
)

// TrainTicketServiceClient is the client API for TrainTicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainTicketServiceClient interface {
	// API to submit a purchase for a ticket
	PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	// API to show details of the receipt for the user
	ViewReceipt(ctx context.Context, in *ViewReceiptRequest, opts ...grpc.CallOption) (*Ticket, error)
	// API to view users and seat they are allocated by section
	ViewUsersBySection(ctx context.Context, in *ViewUsersBySectionRequest, opts ...grpc.CallOption) (*ViewUsersBySectionResponse, error)
	// API to remove a user from the train
	RemoveUserFromTrain(ctx context.Context, in *RemoveUserFromTrainRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	// API to modify a user's seat
	ModifySeat(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*WasModifiedResponse, error)
}

type trainTicketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainTicketServiceClient(cc grpc.ClientConnInterface) TrainTicketServiceClient {
	return &trainTicketServiceClient{cc}
}

func (c *trainTicketServiceClient) PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TrainTicketService_PurchaseTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketServiceClient) ViewReceipt(ctx context.Context, in *ViewReceiptRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TrainTicketService_ViewReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketServiceClient) ViewUsersBySection(ctx context.Context, in *ViewUsersBySectionRequest, opts ...grpc.CallOption) (*ViewUsersBySectionResponse, error) {
	out := new(ViewUsersBySectionResponse)
	err := c.cc.Invoke(ctx, TrainTicketService_ViewUsersBySection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketServiceClient) RemoveUserFromTrain(ctx context.Context, in *RemoveUserFromTrainRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, TrainTicketService_RemoveUserFromTrain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketServiceClient) ModifySeat(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*WasModifiedResponse, error) {
	out := new(WasModifiedResponse)
	err := c.cc.Invoke(ctx, TrainTicketService_ModifySeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainTicketServiceServer is the server API for TrainTicketService service.
// All implementations must embed UnimplementedTrainTicketServiceServer
// for forward compatibility
type TrainTicketServiceServer interface {
	// API to submit a purchase for a ticket
	PurchaseTicket(context.Context, *PurchaseTicketRequest) (*Ticket, error)
	// API to show details of the receipt for the user
	ViewReceipt(context.Context, *ViewReceiptRequest) (*Ticket, error)
	// API to view users and seat they are allocated by section
	ViewUsersBySection(context.Context, *ViewUsersBySectionRequest) (*ViewUsersBySectionResponse, error)
	// API to remove a user from the train
	RemoveUserFromTrain(context.Context, *RemoveUserFromTrainRequest) (*RemoveUserResponse, error)
	// API to modify a user's seat
	ModifySeat(context.Context, *ModifySeatRequest) (*WasModifiedResponse, error)
	mustEmbedUnimplementedTrainTicketServiceServer()
}

// UnimplementedTrainTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainTicketServiceServer struct {
}

func (UnimplementedTrainTicketServiceServer) PurchaseTicket(context.Context, *PurchaseTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTrainTicketServiceServer) ViewReceipt(context.Context, *ViewReceiptRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewReceipt not implemented")
}
func (UnimplementedTrainTicketServiceServer) ViewUsersBySection(context.Context, *ViewUsersBySectionRequest) (*ViewUsersBySectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUsersBySection not implemented")
}
func (UnimplementedTrainTicketServiceServer) RemoveUserFromTrain(context.Context, *RemoveUserFromTrainRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromTrain not implemented")
}
func (UnimplementedTrainTicketServiceServer) ModifySeat(context.Context, *ModifySeatRequest) (*WasModifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySeat not implemented")
}
func (UnimplementedTrainTicketServiceServer) mustEmbedUnimplementedTrainTicketServiceServer() {}

// UnsafeTrainTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainTicketServiceServer will
// result in compilation errors.
type UnsafeTrainTicketServiceServer interface {
	mustEmbedUnimplementedTrainTicketServiceServer()
}

func RegisterTrainTicketServiceServer(s grpc.ServiceRegistrar, srv TrainTicketServiceServer) {
	s.RegisterService(&TrainTicketService_ServiceDesc, srv)
}

func _TrainTicketService_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketServiceServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketService_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketServiceServer).PurchaseTicket(ctx, req.(*PurchaseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketService_ViewReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketServiceServer).ViewReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketService_ViewReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketServiceServer).ViewReceipt(ctx, req.(*ViewReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketService_ViewUsersBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUsersBySectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketServiceServer).ViewUsersBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketService_ViewUsersBySection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketServiceServer).ViewUsersBySection(ctx, req.(*ViewUsersBySectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketService_RemoveUserFromTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketServiceServer).RemoveUserFromTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketService_RemoveUserFromTrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketServiceServer).RemoveUserFromTrain(ctx, req.(*RemoveUserFromTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketService_ModifySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketServiceServer).ModifySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketService_ModifySeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketServiceServer).ModifySeat(ctx, req.(*ModifySeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainTicketService_ServiceDesc is the grpc.ServiceDesc for TrainTicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainTicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrainTicketService",
	HandlerType: (*TrainTicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "purchaseTicket",
			Handler:    _TrainTicketService_PurchaseTicket_Handler,
		},
		{
			MethodName: "ViewReceipt",
			Handler:    _TrainTicketService_ViewReceipt_Handler,
		},
		{
			MethodName: "ViewUsersBySection",
			Handler:    _TrainTicketService_ViewUsersBySection_Handler,
		},
		{
			MethodName: "RemoveUserFromTrain",
			Handler:    _TrainTicketService_RemoveUserFromTrain_Handler,
		},
		{
			MethodName: "ModifySeat",
			Handler:    _TrainTicketService_ModifySeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "train.proto",
}
