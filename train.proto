syntax = "proto3";
option go_package = "./train";
enum Section {
  SECTION_A = 0;
  SECTION_B = 1;
}

message User {
  string user_id = 1;
  string first_name = 2;
  string last_name = 3;
  string email_address = 4;
  bool hasTicket = 5;
  // Optional field to store the ticket
  optional Ticket ticket = 6;
}

message Ticket {
  string from = 1;
  string to = 2;
  string user_id = 3;
  float price_of_ticket = 4;
  Section section = 5;
  string train_id = 7;
  string is_confirmed = 8;
  string seat = 9 ;
  string ticket_id = 10;
}

message purchaseTicketRequest {
  string from = 1;
  string to = 2;
  User user = 3;
  float price_of_ticket = 4;
  Section section = 5;
  string train_id = 7;
}

message viewReceiptRequest {
  string user_id = 1;
}
message viewUsersBySectionRequest{
  Section section = 1;
}
message viewUsersBySectionResponse{
  repeated User users = 1;
}
message removeUserFromTrainRequest{
  string user_id = 1;
  string train_id = 2;
}
message removeUserResponse{
  bool success = 1;
}

message modifySeatRequest{
  string user_id = 1;
  string train_id = 2;
  Section section = 3;
  Section new_section = 4;
  string new_seat = 5;
}

message wasModifiedResponse{
  bool success = 1;
}
service TrainTicketService {
  // API to submit a purchase for a ticket
  rpc purchaseTicket(purchaseTicketRequest) returns (Ticket);

  // API to show details of the receipt for the user
  rpc ViewReceipt(viewReceiptRequest) returns (Ticket);

  // API to view users and seat they are allocated by section
  rpc ViewUsersBySection(viewUsersBySectionRequest) returns (viewUsersBySectionResponse);

  // API to remove a user from the train
  rpc RemoveUserFromTrain(removeUserFromTrainRequest) returns (removeUserResponse);

  // API to modify a user's seat
  rpc ModifySeat(modifySeatRequest) returns (wasModifiedResponse);
}
